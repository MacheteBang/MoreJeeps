@page "/"

<div class="" style="height:100vh">
    <div class="row p-0 m-0 align-items-center shadow" style="background-color:#41533b;height:64px">
        <div class="col-10">
            <span class="text-light display-6">More Jeeps!</span>
        </div>
        <div class="col-2 text-end">
            <button class="btn btn-light" @onclick="OnResetButtonClickedAsync">Reset</button>
        </div>
    </div>
    <div class="row row-cols-2 p-0 m-0" style="background-color:#78866B;height:calc(100vh - 64px)">
        <PlayerPanel @ref="_playerOnePanel" Player="Players.One" PlayerName="Jonathan" PlayerColor="#424d07"
            IncrementScore="IncrementPanelScoreAsync" />
        <PlayerPanel @ref="_playerTwoPanel" Player="Players.Two" PlayerName="Jennifer" PlayerColor="#ba3d4d"
            IncrementScore="IncrementPanelScoreAsync" />
        <PlayerPanel @ref="_playerThreePanel" Player="Players.Three" PlayerName="Jessica" PlayerColor="#1c3d67"
            IncrementScore="IncrementPanelScoreAsync" />
        <PlayerPanel @ref="_playerFourPanel" Player="Players.Four" PlayerName="Tommy" PlayerColor="#7c7c1c"
            IncrementScore="IncrementPanelScoreAsync" />
    </div>
</div>
@code
{
    [Inject] private IMoreJeepsApiService _apiService { get; set; } = default!;

    private PlayerPanel _playerOnePanel = default!;
    private PlayerPanel _playerTwoPanel = default!;
    private PlayerPanel _playerThreePanel = default!;
    private PlayerPanel _playerFourPanel = default!;


    protected override async Task OnInitializedAsync()
    {
        Game game = await _apiService.GetGameAsync();

        game.PlayerScores.TryGetValue(Players.One, out int p1Score);
        if (_playerOnePanel is not null) _playerOnePanel.SetScore(p1Score);
        game.PlayerScores.TryGetValue(Players.Two, out int p2Score);
        if (_playerTwoPanel is not null) _playerTwoPanel.SetScore(p2Score);
        game.PlayerScores.TryGetValue(Players.Three, out int p3Score);
        if (_playerThreePanel is not null) _playerThreePanel.SetScore(p3Score);
        game.PlayerScores.TryGetValue(Players.Four, out int p4Score);
        if (_playerFourPanel is not null) _playerFourPanel.SetScore(p4Score);

        await base.OnInitializedAsync();
    }

    private async Task IncrementPanelScoreAsync(Players player)
    {
        await _apiService.IncrementScoreAsync(player);
    }
}
@functions
{
    private async Task OnResetButtonClickedAsync()
    {
        await _apiService.ResetGameAsync();

        _playerOnePanel.ClearScore();
        _playerTwoPanel.ClearScore();
        _playerThreePanel.ClearScore();
        _playerFourPanel.ClearScore();
    }
}


